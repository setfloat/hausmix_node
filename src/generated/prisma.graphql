# source: https://us1.prisma.sh/patrick-richardson-01c5e7/hausmix/dev
# timestamp: Tue Jun 11 2019 14:18:05 GMT-0700 (Pacific Daylight Time)

type AggregateChoreInstance {
  count: Int!
}

type AggregateChoreTemplate {
  count: Int!
}

type AggregateDebt {
  count: Int!
}

type AggregateHousehold {
  count: Int!
}

type AggregateInvite {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum ChoreCompleteStatus {
  INCOMPLETE
  COMPLETE
  OVERDUE
}

enum ChoreFrequency {
  Once
  Daily
  Weekly
  Monthly
  Quarterly
  Yearly
}

type ChoreInstance implements Node {
  id: ID!
  name: String!
  currentAssigned(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  household: Household!
  debts(where: DebtWhereInput, orderBy: DebtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Debt!]
  choreTemplate: ChoreTemplate!
}

"""A connection to a list of items."""
type ChoreInstanceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChoreInstanceEdge]!
  aggregate: AggregateChoreInstance!
}

input ChoreInstanceCreateInput {
  id: ID
  name: String!
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserCreateManyWithoutCurrentAssignedInput
  household: HouseholdCreateOneWithoutChoreInstancesInput!
  debts: DebtCreateManyWithoutFromInput
  choreTemplate: ChoreTemplateCreateOneWithoutInstancesInput!
}

input ChoreInstanceCreateManyWithoutChoreTemplateInput {
  create: [ChoreInstanceCreateWithoutChoreTemplateInput!]
  connect: [ChoreInstanceWhereUniqueInput!]
}

input ChoreInstanceCreateManyWithoutCurrentAssignedInput {
  create: [ChoreInstanceCreateWithoutCurrentAssignedInput!]
  connect: [ChoreInstanceWhereUniqueInput!]
}

input ChoreInstanceCreateManyWithoutHouseholdInput {
  create: [ChoreInstanceCreateWithoutHouseholdInput!]
  connect: [ChoreInstanceWhereUniqueInput!]
}

input ChoreInstanceCreateOneWithoutDebtsInput {
  create: ChoreInstanceCreateWithoutDebtsInput
  connect: ChoreInstanceWhereUniqueInput
}

input ChoreInstanceCreateWithoutChoreTemplateInput {
  id: ID
  name: String!
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserCreateManyWithoutCurrentAssignedInput
  household: HouseholdCreateOneWithoutChoreInstancesInput!
  debts: DebtCreateManyWithoutFromInput
}

input ChoreInstanceCreateWithoutCurrentAssignedInput {
  id: ID
  name: String!
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  household: HouseholdCreateOneWithoutChoreInstancesInput!
  debts: DebtCreateManyWithoutFromInput
  choreTemplate: ChoreTemplateCreateOneWithoutInstancesInput!
}

input ChoreInstanceCreateWithoutDebtsInput {
  id: ID
  name: String!
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserCreateManyWithoutCurrentAssignedInput
  household: HouseholdCreateOneWithoutChoreInstancesInput!
  choreTemplate: ChoreTemplateCreateOneWithoutInstancesInput!
}

input ChoreInstanceCreateWithoutHouseholdInput {
  id: ID
  name: String!
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserCreateManyWithoutCurrentAssignedInput
  debts: DebtCreateManyWithoutFromInput
  choreTemplate: ChoreTemplateCreateOneWithoutInstancesInput!
}

"""An edge in a connection."""
type ChoreInstanceEdge {
  """The item at the end of the edge."""
  node: ChoreInstance!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChoreInstanceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  startDate_ASC
  startDate_DESC
  deadline_ASC
  deadline_DESC
  instanceCost_ASC
  instanceCost_DESC
  completionStatus_ASC
  completionStatus_DESC
}

type ChoreInstancePreviousValues {
  id: ID!
  name: String!
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
}

input ChoreInstanceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChoreInstanceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChoreInstanceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChoreInstanceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  deadline: DateTime

  """All values that are not equal to given value."""
  deadline_not: DateTime

  """All values that are contained in given list."""
  deadline_in: [DateTime!]

  """All values that are not contained in given list."""
  deadline_not_in: [DateTime!]

  """All values less than the given value."""
  deadline_lt: DateTime

  """All values less than or equal the given value."""
  deadline_lte: DateTime

  """All values greater than the given value."""
  deadline_gt: DateTime

  """All values greater than or equal the given value."""
  deadline_gte: DateTime
  instanceCost: Float

  """All values that are not equal to given value."""
  instanceCost_not: Float

  """All values that are contained in given list."""
  instanceCost_in: [Float!]

  """All values that are not contained in given list."""
  instanceCost_not_in: [Float!]

  """All values less than the given value."""
  instanceCost_lt: Float

  """All values less than or equal the given value."""
  instanceCost_lte: Float

  """All values greater than the given value."""
  instanceCost_gt: Float

  """All values greater than or equal the given value."""
  instanceCost_gte: Float
  completionStatus: ChoreCompleteStatus

  """All values that are not equal to given value."""
  completionStatus_not: ChoreCompleteStatus

  """All values that are contained in given list."""
  completionStatus_in: [ChoreCompleteStatus!]

  """All values that are not contained in given list."""
  completionStatus_not_in: [ChoreCompleteStatus!]
}

type ChoreInstanceSubscriptionPayload {
  mutation: MutationType!
  node: ChoreInstance
  updatedFields: [String!]
  previousValues: ChoreInstancePreviousValues
}

input ChoreInstanceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChoreInstanceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChoreInstanceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChoreInstanceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChoreInstanceWhereInput
}

input ChoreInstanceUpdateInput {
  name: String
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserUpdateManyWithoutCurrentAssignedInput
  household: HouseholdUpdateOneRequiredWithoutChoreInstancesInput
  debts: DebtUpdateManyWithoutFromInput
  choreTemplate: ChoreTemplateUpdateOneRequiredWithoutInstancesInput
}

input ChoreInstanceUpdateManyDataInput {
  name: String
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
}

input ChoreInstanceUpdateManyMutationInput {
  name: String
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
}

input ChoreInstanceUpdateManyWithoutChoreTemplateInput {
  create: [ChoreInstanceCreateWithoutChoreTemplateInput!]
  connect: [ChoreInstanceWhereUniqueInput!]
  set: [ChoreInstanceWhereUniqueInput!]
  disconnect: [ChoreInstanceWhereUniqueInput!]
  delete: [ChoreInstanceWhereUniqueInput!]
  update: [ChoreInstanceUpdateWithWhereUniqueWithoutChoreTemplateInput!]
  updateMany: [ChoreInstanceUpdateManyWithWhereNestedInput!]
  deleteMany: [ChoreInstanceScalarWhereInput!]
  upsert: [ChoreInstanceUpsertWithWhereUniqueWithoutChoreTemplateInput!]
}

input ChoreInstanceUpdateManyWithoutCurrentAssignedInput {
  create: [ChoreInstanceCreateWithoutCurrentAssignedInput!]
  connect: [ChoreInstanceWhereUniqueInput!]
  set: [ChoreInstanceWhereUniqueInput!]
  disconnect: [ChoreInstanceWhereUniqueInput!]
  delete: [ChoreInstanceWhereUniqueInput!]
  update: [ChoreInstanceUpdateWithWhereUniqueWithoutCurrentAssignedInput!]
  updateMany: [ChoreInstanceUpdateManyWithWhereNestedInput!]
  deleteMany: [ChoreInstanceScalarWhereInput!]
  upsert: [ChoreInstanceUpsertWithWhereUniqueWithoutCurrentAssignedInput!]
}

input ChoreInstanceUpdateManyWithoutHouseholdInput {
  create: [ChoreInstanceCreateWithoutHouseholdInput!]
  connect: [ChoreInstanceWhereUniqueInput!]
  set: [ChoreInstanceWhereUniqueInput!]
  disconnect: [ChoreInstanceWhereUniqueInput!]
  delete: [ChoreInstanceWhereUniqueInput!]
  update: [ChoreInstanceUpdateWithWhereUniqueWithoutHouseholdInput!]
  updateMany: [ChoreInstanceUpdateManyWithWhereNestedInput!]
  deleteMany: [ChoreInstanceScalarWhereInput!]
  upsert: [ChoreInstanceUpsertWithWhereUniqueWithoutHouseholdInput!]
}

input ChoreInstanceUpdateManyWithWhereNestedInput {
  where: ChoreInstanceScalarWhereInput!
  data: ChoreInstanceUpdateManyDataInput!
}

input ChoreInstanceUpdateOneRequiredWithoutDebtsInput {
  create: ChoreInstanceCreateWithoutDebtsInput
  connect: ChoreInstanceWhereUniqueInput
  update: ChoreInstanceUpdateWithoutDebtsDataInput
  upsert: ChoreInstanceUpsertWithoutDebtsInput
}

input ChoreInstanceUpdateWithoutChoreTemplateDataInput {
  name: String
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserUpdateManyWithoutCurrentAssignedInput
  household: HouseholdUpdateOneRequiredWithoutChoreInstancesInput
  debts: DebtUpdateManyWithoutFromInput
}

input ChoreInstanceUpdateWithoutCurrentAssignedDataInput {
  name: String
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  household: HouseholdUpdateOneRequiredWithoutChoreInstancesInput
  debts: DebtUpdateManyWithoutFromInput
  choreTemplate: ChoreTemplateUpdateOneRequiredWithoutInstancesInput
}

input ChoreInstanceUpdateWithoutDebtsDataInput {
  name: String
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserUpdateManyWithoutCurrentAssignedInput
  household: HouseholdUpdateOneRequiredWithoutChoreInstancesInput
  choreTemplate: ChoreTemplateUpdateOneRequiredWithoutInstancesInput
}

input ChoreInstanceUpdateWithoutHouseholdDataInput {
  name: String
  startDate: DateTime
  deadline: DateTime
  instanceCost: Float
  completionStatus: ChoreCompleteStatus
  currentAssigned: UserUpdateManyWithoutCurrentAssignedInput
  debts: DebtUpdateManyWithoutFromInput
  choreTemplate: ChoreTemplateUpdateOneRequiredWithoutInstancesInput
}

input ChoreInstanceUpdateWithWhereUniqueWithoutChoreTemplateInput {
  where: ChoreInstanceWhereUniqueInput!
  data: ChoreInstanceUpdateWithoutChoreTemplateDataInput!
}

input ChoreInstanceUpdateWithWhereUniqueWithoutCurrentAssignedInput {
  where: ChoreInstanceWhereUniqueInput!
  data: ChoreInstanceUpdateWithoutCurrentAssignedDataInput!
}

input ChoreInstanceUpdateWithWhereUniqueWithoutHouseholdInput {
  where: ChoreInstanceWhereUniqueInput!
  data: ChoreInstanceUpdateWithoutHouseholdDataInput!
}

input ChoreInstanceUpsertWithoutDebtsInput {
  update: ChoreInstanceUpdateWithoutDebtsDataInput!
  create: ChoreInstanceCreateWithoutDebtsInput!
}

input ChoreInstanceUpsertWithWhereUniqueWithoutChoreTemplateInput {
  where: ChoreInstanceWhereUniqueInput!
  update: ChoreInstanceUpdateWithoutChoreTemplateDataInput!
  create: ChoreInstanceCreateWithoutChoreTemplateInput!
}

input ChoreInstanceUpsertWithWhereUniqueWithoutCurrentAssignedInput {
  where: ChoreInstanceWhereUniqueInput!
  update: ChoreInstanceUpdateWithoutCurrentAssignedDataInput!
  create: ChoreInstanceCreateWithoutCurrentAssignedInput!
}

input ChoreInstanceUpsertWithWhereUniqueWithoutHouseholdInput {
  where: ChoreInstanceWhereUniqueInput!
  update: ChoreInstanceUpdateWithoutHouseholdDataInput!
  create: ChoreInstanceCreateWithoutHouseholdInput!
}

input ChoreInstanceWhereInput {
  """Logical AND on all given filters."""
  AND: [ChoreInstanceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChoreInstanceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChoreInstanceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  deadline: DateTime

  """All values that are not equal to given value."""
  deadline_not: DateTime

  """All values that are contained in given list."""
  deadline_in: [DateTime!]

  """All values that are not contained in given list."""
  deadline_not_in: [DateTime!]

  """All values less than the given value."""
  deadline_lt: DateTime

  """All values less than or equal the given value."""
  deadline_lte: DateTime

  """All values greater than the given value."""
  deadline_gt: DateTime

  """All values greater than or equal the given value."""
  deadline_gte: DateTime
  instanceCost: Float

  """All values that are not equal to given value."""
  instanceCost_not: Float

  """All values that are contained in given list."""
  instanceCost_in: [Float!]

  """All values that are not contained in given list."""
  instanceCost_not_in: [Float!]

  """All values less than the given value."""
  instanceCost_lt: Float

  """All values less than or equal the given value."""
  instanceCost_lte: Float

  """All values greater than the given value."""
  instanceCost_gt: Float

  """All values greater than or equal the given value."""
  instanceCost_gte: Float
  completionStatus: ChoreCompleteStatus

  """All values that are not equal to given value."""
  completionStatus_not: ChoreCompleteStatus

  """All values that are contained in given list."""
  completionStatus_in: [ChoreCompleteStatus!]

  """All values that are not contained in given list."""
  completionStatus_not_in: [ChoreCompleteStatus!]
  currentAssigned_every: UserWhereInput
  currentAssigned_some: UserWhereInput
  currentAssigned_none: UserWhereInput
  household: HouseholdWhereInput
  debts_every: DebtWhereInput
  debts_some: DebtWhereInput
  debts_none: DebtWhereInput
  choreTemplate: ChoreTemplateWhereInput
}

input ChoreInstanceWhereUniqueInput {
  id: ID
}

type ChoreTemplate implements Node {
  id: ID!
  name: String!
  createdBy: User!
  description: String
  choreTemplateCost: Float
  instances(where: ChoreInstanceWhereInput, orderBy: ChoreInstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChoreInstance!]
  household: Household!
  frequency: ChoreFrequency
}

"""A connection to a list of items."""
type ChoreTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChoreTemplateEdge]!
  aggregate: AggregateChoreTemplate!
}

input ChoreTemplateCreateInput {
  id: ID
  name: String!
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  createdBy: UserCreateOneWithoutCreatedChoresInput!
  instances: ChoreInstanceCreateManyWithoutChoreTemplateInput
  household: HouseholdCreateOneWithoutChoreTemplatesInput!
}

input ChoreTemplateCreateManyWithoutCreatedByInput {
  create: [ChoreTemplateCreateWithoutCreatedByInput!]
  connect: [ChoreTemplateWhereUniqueInput!]
}

input ChoreTemplateCreateManyWithoutHouseholdInput {
  create: [ChoreTemplateCreateWithoutHouseholdInput!]
  connect: [ChoreTemplateWhereUniqueInput!]
}

input ChoreTemplateCreateOneWithoutInstancesInput {
  create: ChoreTemplateCreateWithoutInstancesInput
  connect: ChoreTemplateWhereUniqueInput
}

input ChoreTemplateCreateWithoutCreatedByInput {
  id: ID
  name: String!
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  instances: ChoreInstanceCreateManyWithoutChoreTemplateInput
  household: HouseholdCreateOneWithoutChoreTemplatesInput!
}

input ChoreTemplateCreateWithoutHouseholdInput {
  id: ID
  name: String!
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  createdBy: UserCreateOneWithoutCreatedChoresInput!
  instances: ChoreInstanceCreateManyWithoutChoreTemplateInput
}

input ChoreTemplateCreateWithoutInstancesInput {
  id: ID
  name: String!
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  createdBy: UserCreateOneWithoutCreatedChoresInput!
  household: HouseholdCreateOneWithoutChoreTemplatesInput!
}

"""An edge in a connection."""
type ChoreTemplateEdge {
  """The item at the end of the edge."""
  node: ChoreTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChoreTemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  choreTemplateCost_ASC
  choreTemplateCost_DESC
  frequency_ASC
  frequency_DESC
}

type ChoreTemplatePreviousValues {
  id: ID!
  name: String!
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
}

input ChoreTemplateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChoreTemplateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChoreTemplateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChoreTemplateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  choreTemplateCost: Float

  """All values that are not equal to given value."""
  choreTemplateCost_not: Float

  """All values that are contained in given list."""
  choreTemplateCost_in: [Float!]

  """All values that are not contained in given list."""
  choreTemplateCost_not_in: [Float!]

  """All values less than the given value."""
  choreTemplateCost_lt: Float

  """All values less than or equal the given value."""
  choreTemplateCost_lte: Float

  """All values greater than the given value."""
  choreTemplateCost_gt: Float

  """All values greater than or equal the given value."""
  choreTemplateCost_gte: Float
  frequency: ChoreFrequency

  """All values that are not equal to given value."""
  frequency_not: ChoreFrequency

  """All values that are contained in given list."""
  frequency_in: [ChoreFrequency!]

  """All values that are not contained in given list."""
  frequency_not_in: [ChoreFrequency!]
}

type ChoreTemplateSubscriptionPayload {
  mutation: MutationType!
  node: ChoreTemplate
  updatedFields: [String!]
  previousValues: ChoreTemplatePreviousValues
}

input ChoreTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChoreTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChoreTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChoreTemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChoreTemplateWhereInput
}

input ChoreTemplateUpdateInput {
  name: String
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  createdBy: UserUpdateOneRequiredWithoutCreatedChoresInput
  instances: ChoreInstanceUpdateManyWithoutChoreTemplateInput
  household: HouseholdUpdateOneRequiredWithoutChoreTemplatesInput
}

input ChoreTemplateUpdateManyDataInput {
  name: String
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
}

input ChoreTemplateUpdateManyMutationInput {
  name: String
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
}

input ChoreTemplateUpdateManyWithoutCreatedByInput {
  create: [ChoreTemplateCreateWithoutCreatedByInput!]
  connect: [ChoreTemplateWhereUniqueInput!]
  set: [ChoreTemplateWhereUniqueInput!]
  disconnect: [ChoreTemplateWhereUniqueInput!]
  delete: [ChoreTemplateWhereUniqueInput!]
  update: [ChoreTemplateUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [ChoreTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ChoreTemplateScalarWhereInput!]
  upsert: [ChoreTemplateUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ChoreTemplateUpdateManyWithoutHouseholdInput {
  create: [ChoreTemplateCreateWithoutHouseholdInput!]
  connect: [ChoreTemplateWhereUniqueInput!]
  set: [ChoreTemplateWhereUniqueInput!]
  disconnect: [ChoreTemplateWhereUniqueInput!]
  delete: [ChoreTemplateWhereUniqueInput!]
  update: [ChoreTemplateUpdateWithWhereUniqueWithoutHouseholdInput!]
  updateMany: [ChoreTemplateUpdateManyWithWhereNestedInput!]
  deleteMany: [ChoreTemplateScalarWhereInput!]
  upsert: [ChoreTemplateUpsertWithWhereUniqueWithoutHouseholdInput!]
}

input ChoreTemplateUpdateManyWithWhereNestedInput {
  where: ChoreTemplateScalarWhereInput!
  data: ChoreTemplateUpdateManyDataInput!
}

input ChoreTemplateUpdateOneRequiredWithoutInstancesInput {
  create: ChoreTemplateCreateWithoutInstancesInput
  connect: ChoreTemplateWhereUniqueInput
  update: ChoreTemplateUpdateWithoutInstancesDataInput
  upsert: ChoreTemplateUpsertWithoutInstancesInput
}

input ChoreTemplateUpdateWithoutCreatedByDataInput {
  name: String
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  instances: ChoreInstanceUpdateManyWithoutChoreTemplateInput
  household: HouseholdUpdateOneRequiredWithoutChoreTemplatesInput
}

input ChoreTemplateUpdateWithoutHouseholdDataInput {
  name: String
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  createdBy: UserUpdateOneRequiredWithoutCreatedChoresInput
  instances: ChoreInstanceUpdateManyWithoutChoreTemplateInput
}

input ChoreTemplateUpdateWithoutInstancesDataInput {
  name: String
  description: String
  choreTemplateCost: Float
  frequency: ChoreFrequency
  createdBy: UserUpdateOneRequiredWithoutCreatedChoresInput
  household: HouseholdUpdateOneRequiredWithoutChoreTemplatesInput
}

input ChoreTemplateUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChoreTemplateWhereUniqueInput!
  data: ChoreTemplateUpdateWithoutCreatedByDataInput!
}

input ChoreTemplateUpdateWithWhereUniqueWithoutHouseholdInput {
  where: ChoreTemplateWhereUniqueInput!
  data: ChoreTemplateUpdateWithoutHouseholdDataInput!
}

input ChoreTemplateUpsertWithoutInstancesInput {
  update: ChoreTemplateUpdateWithoutInstancesDataInput!
  create: ChoreTemplateCreateWithoutInstancesInput!
}

input ChoreTemplateUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChoreTemplateWhereUniqueInput!
  update: ChoreTemplateUpdateWithoutCreatedByDataInput!
  create: ChoreTemplateCreateWithoutCreatedByInput!
}

input ChoreTemplateUpsertWithWhereUniqueWithoutHouseholdInput {
  where: ChoreTemplateWhereUniqueInput!
  update: ChoreTemplateUpdateWithoutHouseholdDataInput!
  create: ChoreTemplateCreateWithoutHouseholdInput!
}

input ChoreTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [ChoreTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChoreTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChoreTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  choreTemplateCost: Float

  """All values that are not equal to given value."""
  choreTemplateCost_not: Float

  """All values that are contained in given list."""
  choreTemplateCost_in: [Float!]

  """All values that are not contained in given list."""
  choreTemplateCost_not_in: [Float!]

  """All values less than the given value."""
  choreTemplateCost_lt: Float

  """All values less than or equal the given value."""
  choreTemplateCost_lte: Float

  """All values greater than the given value."""
  choreTemplateCost_gt: Float

  """All values greater than or equal the given value."""
  choreTemplateCost_gte: Float
  frequency: ChoreFrequency

  """All values that are not equal to given value."""
  frequency_not: ChoreFrequency

  """All values that are contained in given list."""
  frequency_in: [ChoreFrequency!]

  """All values that are not contained in given list."""
  frequency_not_in: [ChoreFrequency!]
  createdBy: UserWhereInput
  instances_every: ChoreInstanceWhereInput
  instances_some: ChoreInstanceWhereInput
  instances_none: ChoreInstanceWhereInput
  household: HouseholdWhereInput
}

input ChoreTemplateWhereUniqueInput {
  id: ID
}

scalar DateTime

type Debt implements Node {
  id: ID!
  from: ChoreInstance!
  settled: DebtStatus!
  debtor: User!
  creditor: User!
  amount: Float!
  amountPaid: Float!
  household: Household!
}

"""A connection to a list of items."""
type DebtConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DebtEdge]!
  aggregate: AggregateDebt!
}

input DebtCreateInput {
  id: ID
  settled: DebtStatus!
  amount: Float!
  amountPaid: Float!
  from: ChoreInstanceCreateOneWithoutDebtsInput!
  debtor: UserCreateOneWithoutDebtsInput!
  creditor: UserCreateOneWithoutCreditsInput!
  household: HouseholdCreateOneWithoutDebtsInput!
}

input DebtCreateManyWithoutCreditorInput {
  create: [DebtCreateWithoutCreditorInput!]
  connect: [DebtWhereUniqueInput!]
}

input DebtCreateManyWithoutDebtorInput {
  create: [DebtCreateWithoutDebtorInput!]
  connect: [DebtWhereUniqueInput!]
}

input DebtCreateManyWithoutFromInput {
  create: [DebtCreateWithoutFromInput!]
  connect: [DebtWhereUniqueInput!]
}

input DebtCreateManyWithoutHouseholdInput {
  create: [DebtCreateWithoutHouseholdInput!]
  connect: [DebtWhereUniqueInput!]
}

input DebtCreateWithoutCreditorInput {
  id: ID
  settled: DebtStatus!
  amount: Float!
  amountPaid: Float!
  from: ChoreInstanceCreateOneWithoutDebtsInput!
  debtor: UserCreateOneWithoutDebtsInput!
  household: HouseholdCreateOneWithoutDebtsInput!
}

input DebtCreateWithoutDebtorInput {
  id: ID
  settled: DebtStatus!
  amount: Float!
  amountPaid: Float!
  from: ChoreInstanceCreateOneWithoutDebtsInput!
  creditor: UserCreateOneWithoutCreditsInput!
  household: HouseholdCreateOneWithoutDebtsInput!
}

input DebtCreateWithoutFromInput {
  id: ID
  settled: DebtStatus!
  amount: Float!
  amountPaid: Float!
  debtor: UserCreateOneWithoutDebtsInput!
  creditor: UserCreateOneWithoutCreditsInput!
  household: HouseholdCreateOneWithoutDebtsInput!
}

input DebtCreateWithoutHouseholdInput {
  id: ID
  settled: DebtStatus!
  amount: Float!
  amountPaid: Float!
  from: ChoreInstanceCreateOneWithoutDebtsInput!
  debtor: UserCreateOneWithoutDebtsInput!
  creditor: UserCreateOneWithoutCreditsInput!
}

"""An edge in a connection."""
type DebtEdge {
  """The item at the end of the edge."""
  node: Debt!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DebtOrderByInput {
  id_ASC
  id_DESC
  settled_ASC
  settled_DESC
  amount_ASC
  amount_DESC
  amountPaid_ASC
  amountPaid_DESC
}

type DebtPreviousValues {
  id: ID!
  settled: DebtStatus!
  amount: Float!
  amountPaid: Float!
}

input DebtScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DebtScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DebtScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DebtScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  settled: DebtStatus

  """All values that are not equal to given value."""
  settled_not: DebtStatus

  """All values that are contained in given list."""
  settled_in: [DebtStatus!]

  """All values that are not contained in given list."""
  settled_not_in: [DebtStatus!]
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  amountPaid: Float

  """All values that are not equal to given value."""
  amountPaid_not: Float

  """All values that are contained in given list."""
  amountPaid_in: [Float!]

  """All values that are not contained in given list."""
  amountPaid_not_in: [Float!]

  """All values less than the given value."""
  amountPaid_lt: Float

  """All values less than or equal the given value."""
  amountPaid_lte: Float

  """All values greater than the given value."""
  amountPaid_gt: Float

  """All values greater than or equal the given value."""
  amountPaid_gte: Float
}

enum DebtStatus {
  UNPAID
  PAID
  PARTIAL
  CANCELLED
  OVERPAID
}

type DebtSubscriptionPayload {
  mutation: MutationType!
  node: Debt
  updatedFields: [String!]
  previousValues: DebtPreviousValues
}

input DebtSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DebtSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DebtSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DebtSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DebtWhereInput
}

input DebtUpdateInput {
  settled: DebtStatus
  amount: Float
  amountPaid: Float
  from: ChoreInstanceUpdateOneRequiredWithoutDebtsInput
  debtor: UserUpdateOneRequiredWithoutDebtsInput
  creditor: UserUpdateOneRequiredWithoutCreditsInput
  household: HouseholdUpdateOneRequiredWithoutDebtsInput
}

input DebtUpdateManyDataInput {
  settled: DebtStatus
  amount: Float
  amountPaid: Float
}

input DebtUpdateManyMutationInput {
  settled: DebtStatus
  amount: Float
  amountPaid: Float
}

input DebtUpdateManyWithoutCreditorInput {
  create: [DebtCreateWithoutCreditorInput!]
  connect: [DebtWhereUniqueInput!]
  set: [DebtWhereUniqueInput!]
  disconnect: [DebtWhereUniqueInput!]
  delete: [DebtWhereUniqueInput!]
  update: [DebtUpdateWithWhereUniqueWithoutCreditorInput!]
  updateMany: [DebtUpdateManyWithWhereNestedInput!]
  deleteMany: [DebtScalarWhereInput!]
  upsert: [DebtUpsertWithWhereUniqueWithoutCreditorInput!]
}

input DebtUpdateManyWithoutDebtorInput {
  create: [DebtCreateWithoutDebtorInput!]
  connect: [DebtWhereUniqueInput!]
  set: [DebtWhereUniqueInput!]
  disconnect: [DebtWhereUniqueInput!]
  delete: [DebtWhereUniqueInput!]
  update: [DebtUpdateWithWhereUniqueWithoutDebtorInput!]
  updateMany: [DebtUpdateManyWithWhereNestedInput!]
  deleteMany: [DebtScalarWhereInput!]
  upsert: [DebtUpsertWithWhereUniqueWithoutDebtorInput!]
}

input DebtUpdateManyWithoutFromInput {
  create: [DebtCreateWithoutFromInput!]
  connect: [DebtWhereUniqueInput!]
  set: [DebtWhereUniqueInput!]
  disconnect: [DebtWhereUniqueInput!]
  delete: [DebtWhereUniqueInput!]
  update: [DebtUpdateWithWhereUniqueWithoutFromInput!]
  updateMany: [DebtUpdateManyWithWhereNestedInput!]
  deleteMany: [DebtScalarWhereInput!]
  upsert: [DebtUpsertWithWhereUniqueWithoutFromInput!]
}

input DebtUpdateManyWithoutHouseholdInput {
  create: [DebtCreateWithoutHouseholdInput!]
  connect: [DebtWhereUniqueInput!]
  set: [DebtWhereUniqueInput!]
  disconnect: [DebtWhereUniqueInput!]
  delete: [DebtWhereUniqueInput!]
  update: [DebtUpdateWithWhereUniqueWithoutHouseholdInput!]
  updateMany: [DebtUpdateManyWithWhereNestedInput!]
  deleteMany: [DebtScalarWhereInput!]
  upsert: [DebtUpsertWithWhereUniqueWithoutHouseholdInput!]
}

input DebtUpdateManyWithWhereNestedInput {
  where: DebtScalarWhereInput!
  data: DebtUpdateManyDataInput!
}

input DebtUpdateWithoutCreditorDataInput {
  settled: DebtStatus
  amount: Float
  amountPaid: Float
  from: ChoreInstanceUpdateOneRequiredWithoutDebtsInput
  debtor: UserUpdateOneRequiredWithoutDebtsInput
  household: HouseholdUpdateOneRequiredWithoutDebtsInput
}

input DebtUpdateWithoutDebtorDataInput {
  settled: DebtStatus
  amount: Float
  amountPaid: Float
  from: ChoreInstanceUpdateOneRequiredWithoutDebtsInput
  creditor: UserUpdateOneRequiredWithoutCreditsInput
  household: HouseholdUpdateOneRequiredWithoutDebtsInput
}

input DebtUpdateWithoutFromDataInput {
  settled: DebtStatus
  amount: Float
  amountPaid: Float
  debtor: UserUpdateOneRequiredWithoutDebtsInput
  creditor: UserUpdateOneRequiredWithoutCreditsInput
  household: HouseholdUpdateOneRequiredWithoutDebtsInput
}

input DebtUpdateWithoutHouseholdDataInput {
  settled: DebtStatus
  amount: Float
  amountPaid: Float
  from: ChoreInstanceUpdateOneRequiredWithoutDebtsInput
  debtor: UserUpdateOneRequiredWithoutDebtsInput
  creditor: UserUpdateOneRequiredWithoutCreditsInput
}

input DebtUpdateWithWhereUniqueWithoutCreditorInput {
  where: DebtWhereUniqueInput!
  data: DebtUpdateWithoutCreditorDataInput!
}

input DebtUpdateWithWhereUniqueWithoutDebtorInput {
  where: DebtWhereUniqueInput!
  data: DebtUpdateWithoutDebtorDataInput!
}

input DebtUpdateWithWhereUniqueWithoutFromInput {
  where: DebtWhereUniqueInput!
  data: DebtUpdateWithoutFromDataInput!
}

input DebtUpdateWithWhereUniqueWithoutHouseholdInput {
  where: DebtWhereUniqueInput!
  data: DebtUpdateWithoutHouseholdDataInput!
}

input DebtUpsertWithWhereUniqueWithoutCreditorInput {
  where: DebtWhereUniqueInput!
  update: DebtUpdateWithoutCreditorDataInput!
  create: DebtCreateWithoutCreditorInput!
}

input DebtUpsertWithWhereUniqueWithoutDebtorInput {
  where: DebtWhereUniqueInput!
  update: DebtUpdateWithoutDebtorDataInput!
  create: DebtCreateWithoutDebtorInput!
}

input DebtUpsertWithWhereUniqueWithoutFromInput {
  where: DebtWhereUniqueInput!
  update: DebtUpdateWithoutFromDataInput!
  create: DebtCreateWithoutFromInput!
}

input DebtUpsertWithWhereUniqueWithoutHouseholdInput {
  where: DebtWhereUniqueInput!
  update: DebtUpdateWithoutHouseholdDataInput!
  create: DebtCreateWithoutHouseholdInput!
}

input DebtWhereInput {
  """Logical AND on all given filters."""
  AND: [DebtWhereInput!]

  """Logical OR on all given filters."""
  OR: [DebtWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DebtWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  settled: DebtStatus

  """All values that are not equal to given value."""
  settled_not: DebtStatus

  """All values that are contained in given list."""
  settled_in: [DebtStatus!]

  """All values that are not contained in given list."""
  settled_not_in: [DebtStatus!]
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  amountPaid: Float

  """All values that are not equal to given value."""
  amountPaid_not: Float

  """All values that are contained in given list."""
  amountPaid_in: [Float!]

  """All values that are not contained in given list."""
  amountPaid_not_in: [Float!]

  """All values less than the given value."""
  amountPaid_lt: Float

  """All values less than or equal the given value."""
  amountPaid_lte: Float

  """All values greater than the given value."""
  amountPaid_gt: Float

  """All values greater than or equal the given value."""
  amountPaid_gte: Float
  from: ChoreInstanceWhereInput
  debtor: UserWhereInput
  creditor: UserWhereInput
  household: HouseholdWhereInput
}

input DebtWhereUniqueInput {
  id: ID
}

type Household implements Node {
  id: ID!
  name: String!
  houseMembers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  headsOfHouse(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  choreTemplates(where: ChoreTemplateWhereInput, orderBy: ChoreTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChoreTemplate!]
  choreInstances(where: ChoreInstanceWhereInput, orderBy: ChoreInstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChoreInstance!]
  debts(where: DebtWhereInput, orderBy: DebtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Debt!]
}

"""A connection to a list of items."""
type HouseholdConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HouseholdEdge]!
  aggregate: AggregateHousehold!
}

input HouseholdCreateInput {
  id: ID
  name: String!
  houseMembers: UserCreateManyWithoutHouseholdsInput
  headsOfHouse: UserCreateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateCreateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceCreateManyWithoutHouseholdInput
  debts: DebtCreateManyWithoutHouseholdInput
}

input HouseholdCreateManyWithoutHeadsOfHouseInput {
  create: [HouseholdCreateWithoutHeadsOfHouseInput!]
  connect: [HouseholdWhereUniqueInput!]
}

input HouseholdCreateManyWithoutHouseMembersInput {
  create: [HouseholdCreateWithoutHouseMembersInput!]
  connect: [HouseholdWhereUniqueInput!]
}

input HouseholdCreateOneInput {
  create: HouseholdCreateInput
  connect: HouseholdWhereUniqueInput
}

input HouseholdCreateOneWithoutChoreInstancesInput {
  create: HouseholdCreateWithoutChoreInstancesInput
  connect: HouseholdWhereUniqueInput
}

input HouseholdCreateOneWithoutChoreTemplatesInput {
  create: HouseholdCreateWithoutChoreTemplatesInput
  connect: HouseholdWhereUniqueInput
}

input HouseholdCreateOneWithoutDebtsInput {
  create: HouseholdCreateWithoutDebtsInput
  connect: HouseholdWhereUniqueInput
}

input HouseholdCreateWithoutChoreInstancesInput {
  id: ID
  name: String!
  houseMembers: UserCreateManyWithoutHouseholdsInput
  headsOfHouse: UserCreateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateCreateManyWithoutHouseholdInput
  debts: DebtCreateManyWithoutHouseholdInput
}

input HouseholdCreateWithoutChoreTemplatesInput {
  id: ID
  name: String!
  houseMembers: UserCreateManyWithoutHouseholdsInput
  headsOfHouse: UserCreateManyWithoutHouseholdsManagedInput
  choreInstances: ChoreInstanceCreateManyWithoutHouseholdInput
  debts: DebtCreateManyWithoutHouseholdInput
}

input HouseholdCreateWithoutDebtsInput {
  id: ID
  name: String!
  houseMembers: UserCreateManyWithoutHouseholdsInput
  headsOfHouse: UserCreateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateCreateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceCreateManyWithoutHouseholdInput
}

input HouseholdCreateWithoutHeadsOfHouseInput {
  id: ID
  name: String!
  houseMembers: UserCreateManyWithoutHouseholdsInput
  choreTemplates: ChoreTemplateCreateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceCreateManyWithoutHouseholdInput
  debts: DebtCreateManyWithoutHouseholdInput
}

input HouseholdCreateWithoutHouseMembersInput {
  id: ID
  name: String!
  headsOfHouse: UserCreateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateCreateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceCreateManyWithoutHouseholdInput
  debts: DebtCreateManyWithoutHouseholdInput
}

"""An edge in a connection."""
type HouseholdEdge {
  """The item at the end of the edge."""
  node: Household!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HouseholdOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type HouseholdPreviousValues {
  id: ID!
  name: String!
}

input HouseholdScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseholdScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseholdScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseholdScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type HouseholdSubscriptionPayload {
  mutation: MutationType!
  node: Household
  updatedFields: [String!]
  previousValues: HouseholdPreviousValues
}

input HouseholdSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseholdSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseholdSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseholdSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HouseholdWhereInput
}

input HouseholdUpdateDataInput {
  name: String
  houseMembers: UserUpdateManyWithoutHouseholdsInput
  headsOfHouse: UserUpdateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateUpdateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceUpdateManyWithoutHouseholdInput
  debts: DebtUpdateManyWithoutHouseholdInput
}

input HouseholdUpdateInput {
  name: String
  houseMembers: UserUpdateManyWithoutHouseholdsInput
  headsOfHouse: UserUpdateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateUpdateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceUpdateManyWithoutHouseholdInput
  debts: DebtUpdateManyWithoutHouseholdInput
}

input HouseholdUpdateManyDataInput {
  name: String
}

input HouseholdUpdateManyMutationInput {
  name: String
}

input HouseholdUpdateManyWithoutHeadsOfHouseInput {
  create: [HouseholdCreateWithoutHeadsOfHouseInput!]
  connect: [HouseholdWhereUniqueInput!]
  set: [HouseholdWhereUniqueInput!]
  disconnect: [HouseholdWhereUniqueInput!]
  delete: [HouseholdWhereUniqueInput!]
  update: [HouseholdUpdateWithWhereUniqueWithoutHeadsOfHouseInput!]
  updateMany: [HouseholdUpdateManyWithWhereNestedInput!]
  deleteMany: [HouseholdScalarWhereInput!]
  upsert: [HouseholdUpsertWithWhereUniqueWithoutHeadsOfHouseInput!]
}

input HouseholdUpdateManyWithoutHouseMembersInput {
  create: [HouseholdCreateWithoutHouseMembersInput!]
  connect: [HouseholdWhereUniqueInput!]
  set: [HouseholdWhereUniqueInput!]
  disconnect: [HouseholdWhereUniqueInput!]
  delete: [HouseholdWhereUniqueInput!]
  update: [HouseholdUpdateWithWhereUniqueWithoutHouseMembersInput!]
  updateMany: [HouseholdUpdateManyWithWhereNestedInput!]
  deleteMany: [HouseholdScalarWhereInput!]
  upsert: [HouseholdUpsertWithWhereUniqueWithoutHouseMembersInput!]
}

input HouseholdUpdateManyWithWhereNestedInput {
  where: HouseholdScalarWhereInput!
  data: HouseholdUpdateManyDataInput!
}

input HouseholdUpdateOneRequiredInput {
  create: HouseholdCreateInput
  connect: HouseholdWhereUniqueInput
  update: HouseholdUpdateDataInput
  upsert: HouseholdUpsertNestedInput
}

input HouseholdUpdateOneRequiredWithoutChoreInstancesInput {
  create: HouseholdCreateWithoutChoreInstancesInput
  connect: HouseholdWhereUniqueInput
  update: HouseholdUpdateWithoutChoreInstancesDataInput
  upsert: HouseholdUpsertWithoutChoreInstancesInput
}

input HouseholdUpdateOneRequiredWithoutChoreTemplatesInput {
  create: HouseholdCreateWithoutChoreTemplatesInput
  connect: HouseholdWhereUniqueInput
  update: HouseholdUpdateWithoutChoreTemplatesDataInput
  upsert: HouseholdUpsertWithoutChoreTemplatesInput
}

input HouseholdUpdateOneRequiredWithoutDebtsInput {
  create: HouseholdCreateWithoutDebtsInput
  connect: HouseholdWhereUniqueInput
  update: HouseholdUpdateWithoutDebtsDataInput
  upsert: HouseholdUpsertWithoutDebtsInput
}

input HouseholdUpdateWithoutChoreInstancesDataInput {
  name: String
  houseMembers: UserUpdateManyWithoutHouseholdsInput
  headsOfHouse: UserUpdateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateUpdateManyWithoutHouseholdInput
  debts: DebtUpdateManyWithoutHouseholdInput
}

input HouseholdUpdateWithoutChoreTemplatesDataInput {
  name: String
  houseMembers: UserUpdateManyWithoutHouseholdsInput
  headsOfHouse: UserUpdateManyWithoutHouseholdsManagedInput
  choreInstances: ChoreInstanceUpdateManyWithoutHouseholdInput
  debts: DebtUpdateManyWithoutHouseholdInput
}

input HouseholdUpdateWithoutDebtsDataInput {
  name: String
  houseMembers: UserUpdateManyWithoutHouseholdsInput
  headsOfHouse: UserUpdateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateUpdateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceUpdateManyWithoutHouseholdInput
}

input HouseholdUpdateWithoutHeadsOfHouseDataInput {
  name: String
  houseMembers: UserUpdateManyWithoutHouseholdsInput
  choreTemplates: ChoreTemplateUpdateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceUpdateManyWithoutHouseholdInput
  debts: DebtUpdateManyWithoutHouseholdInput
}

input HouseholdUpdateWithoutHouseMembersDataInput {
  name: String
  headsOfHouse: UserUpdateManyWithoutHouseholdsManagedInput
  choreTemplates: ChoreTemplateUpdateManyWithoutHouseholdInput
  choreInstances: ChoreInstanceUpdateManyWithoutHouseholdInput
  debts: DebtUpdateManyWithoutHouseholdInput
}

input HouseholdUpdateWithWhereUniqueWithoutHeadsOfHouseInput {
  where: HouseholdWhereUniqueInput!
  data: HouseholdUpdateWithoutHeadsOfHouseDataInput!
}

input HouseholdUpdateWithWhereUniqueWithoutHouseMembersInput {
  where: HouseholdWhereUniqueInput!
  data: HouseholdUpdateWithoutHouseMembersDataInput!
}

input HouseholdUpsertNestedInput {
  update: HouseholdUpdateDataInput!
  create: HouseholdCreateInput!
}

input HouseholdUpsertWithoutChoreInstancesInput {
  update: HouseholdUpdateWithoutChoreInstancesDataInput!
  create: HouseholdCreateWithoutChoreInstancesInput!
}

input HouseholdUpsertWithoutChoreTemplatesInput {
  update: HouseholdUpdateWithoutChoreTemplatesDataInput!
  create: HouseholdCreateWithoutChoreTemplatesInput!
}

input HouseholdUpsertWithoutDebtsInput {
  update: HouseholdUpdateWithoutDebtsDataInput!
  create: HouseholdCreateWithoutDebtsInput!
}

input HouseholdUpsertWithWhereUniqueWithoutHeadsOfHouseInput {
  where: HouseholdWhereUniqueInput!
  update: HouseholdUpdateWithoutHeadsOfHouseDataInput!
  create: HouseholdCreateWithoutHeadsOfHouseInput!
}

input HouseholdUpsertWithWhereUniqueWithoutHouseMembersInput {
  where: HouseholdWhereUniqueInput!
  update: HouseholdUpdateWithoutHouseMembersDataInput!
  create: HouseholdCreateWithoutHouseMembersInput!
}

input HouseholdWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseholdWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseholdWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseholdWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  houseMembers_every: UserWhereInput
  houseMembers_some: UserWhereInput
  houseMembers_none: UserWhereInput
  headsOfHouse_every: UserWhereInput
  headsOfHouse_some: UserWhereInput
  headsOfHouse_none: UserWhereInput
  choreTemplates_every: ChoreTemplateWhereInput
  choreTemplates_some: ChoreTemplateWhereInput
  choreTemplates_none: ChoreTemplateWhereInput
  choreInstances_every: ChoreInstanceWhereInput
  choreInstances_some: ChoreInstanceWhereInput
  choreInstances_none: ChoreInstanceWhereInput
  debts_every: DebtWhereInput
  debts_some: DebtWhereInput
  debts_none: DebtWhereInput
}

input HouseholdWhereUniqueInput {
  id: ID
}

type Invite implements Node {
  id: ID!
  household: Household!
  invitedBy: User!
  invitedEmail: String!
  invitedIsUser: Boolean!
  inviteStatus: InviteStatus!
  inviteToken: String
  inviteTokenExpiry: Float
}

"""A connection to a list of items."""
type InviteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InviteEdge]!
  aggregate: AggregateInvite!
}

input InviteCreateInput {
  id: ID
  invitedEmail: String!
  invitedIsUser: Boolean!
  inviteStatus: InviteStatus!
  inviteToken: String
  inviteTokenExpiry: Float
  household: HouseholdCreateOneInput!
  invitedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type InviteEdge {
  """The item at the end of the edge."""
  node: Invite!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InviteOrderByInput {
  id_ASC
  id_DESC
  invitedEmail_ASC
  invitedEmail_DESC
  invitedIsUser_ASC
  invitedIsUser_DESC
  inviteStatus_ASC
  inviteStatus_DESC
  inviteToken_ASC
  inviteToken_DESC
  inviteTokenExpiry_ASC
  inviteTokenExpiry_DESC
}

type InvitePreviousValues {
  id: ID!
  invitedEmail: String!
  invitedIsUser: Boolean!
  inviteStatus: InviteStatus!
  inviteToken: String
  inviteTokenExpiry: Float
}

enum InviteStatus {
  PENDING
  UNCONFIRMED_EMAIL
  DENIED
  ACCEPTED
}

type InviteSubscriptionPayload {
  mutation: MutationType!
  node: Invite
  updatedFields: [String!]
  previousValues: InvitePreviousValues
}

input InviteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InviteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InviteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InviteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InviteWhereInput
}

input InviteUpdateInput {
  invitedEmail: String
  invitedIsUser: Boolean
  inviteStatus: InviteStatus
  inviteToken: String
  inviteTokenExpiry: Float
  household: HouseholdUpdateOneRequiredInput
  invitedBy: UserUpdateOneRequiredInput
}

input InviteUpdateManyMutationInput {
  invitedEmail: String
  invitedIsUser: Boolean
  inviteStatus: InviteStatus
  inviteToken: String
  inviteTokenExpiry: Float
}

input InviteWhereInput {
  """Logical AND on all given filters."""
  AND: [InviteWhereInput!]

  """Logical OR on all given filters."""
  OR: [InviteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InviteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  invitedEmail: String

  """All values that are not equal to given value."""
  invitedEmail_not: String

  """All values that are contained in given list."""
  invitedEmail_in: [String!]

  """All values that are not contained in given list."""
  invitedEmail_not_in: [String!]

  """All values less than the given value."""
  invitedEmail_lt: String

  """All values less than or equal the given value."""
  invitedEmail_lte: String

  """All values greater than the given value."""
  invitedEmail_gt: String

  """All values greater than or equal the given value."""
  invitedEmail_gte: String

  """All values containing the given string."""
  invitedEmail_contains: String

  """All values not containing the given string."""
  invitedEmail_not_contains: String

  """All values starting with the given string."""
  invitedEmail_starts_with: String

  """All values not starting with the given string."""
  invitedEmail_not_starts_with: String

  """All values ending with the given string."""
  invitedEmail_ends_with: String

  """All values not ending with the given string."""
  invitedEmail_not_ends_with: String
  invitedIsUser: Boolean

  """All values that are not equal to given value."""
  invitedIsUser_not: Boolean
  inviteStatus: InviteStatus

  """All values that are not equal to given value."""
  inviteStatus_not: InviteStatus

  """All values that are contained in given list."""
  inviteStatus_in: [InviteStatus!]

  """All values that are not contained in given list."""
  inviteStatus_not_in: [InviteStatus!]
  inviteToken: String

  """All values that are not equal to given value."""
  inviteToken_not: String

  """All values that are contained in given list."""
  inviteToken_in: [String!]

  """All values that are not contained in given list."""
  inviteToken_not_in: [String!]

  """All values less than the given value."""
  inviteToken_lt: String

  """All values less than or equal the given value."""
  inviteToken_lte: String

  """All values greater than the given value."""
  inviteToken_gt: String

  """All values greater than or equal the given value."""
  inviteToken_gte: String

  """All values containing the given string."""
  inviteToken_contains: String

  """All values not containing the given string."""
  inviteToken_not_contains: String

  """All values starting with the given string."""
  inviteToken_starts_with: String

  """All values not starting with the given string."""
  inviteToken_not_starts_with: String

  """All values ending with the given string."""
  inviteToken_ends_with: String

  """All values not ending with the given string."""
  inviteToken_not_ends_with: String
  inviteTokenExpiry: Float

  """All values that are not equal to given value."""
  inviteTokenExpiry_not: Float

  """All values that are contained in given list."""
  inviteTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  inviteTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  inviteTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  inviteTokenExpiry_lte: Float

  """All values greater than the given value."""
  inviteTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  inviteTokenExpiry_gte: Float
  household: HouseholdWhereInput
  invitedBy: UserWhereInput
}

input InviteWhereUniqueInput {
  id: ID
  inviteToken: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createInvite(data: InviteCreateInput!): Invite!
  createChoreTemplate(data: ChoreTemplateCreateInput!): ChoreTemplate!
  createChoreInstance(data: ChoreInstanceCreateInput!): ChoreInstance!
  createDebt(data: DebtCreateInput!): Debt!
  createUser(data: UserCreateInput!): User!
  createHousehold(data: HouseholdCreateInput!): Household!
  updateInvite(data: InviteUpdateInput!, where: InviteWhereUniqueInput!): Invite
  updateChoreTemplate(data: ChoreTemplateUpdateInput!, where: ChoreTemplateWhereUniqueInput!): ChoreTemplate
  updateChoreInstance(data: ChoreInstanceUpdateInput!, where: ChoreInstanceWhereUniqueInput!): ChoreInstance
  updateDebt(data: DebtUpdateInput!, where: DebtWhereUniqueInput!): Debt
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateHousehold(data: HouseholdUpdateInput!, where: HouseholdWhereUniqueInput!): Household
  deleteInvite(where: InviteWhereUniqueInput!): Invite
  deleteChoreTemplate(where: ChoreTemplateWhereUniqueInput!): ChoreTemplate
  deleteChoreInstance(where: ChoreInstanceWhereUniqueInput!): ChoreInstance
  deleteDebt(where: DebtWhereUniqueInput!): Debt
  deleteUser(where: UserWhereUniqueInput!): User
  deleteHousehold(where: HouseholdWhereUniqueInput!): Household
  upsertInvite(where: InviteWhereUniqueInput!, create: InviteCreateInput!, update: InviteUpdateInput!): Invite!
  upsertChoreTemplate(where: ChoreTemplateWhereUniqueInput!, create: ChoreTemplateCreateInput!, update: ChoreTemplateUpdateInput!): ChoreTemplate!
  upsertChoreInstance(where: ChoreInstanceWhereUniqueInput!, create: ChoreInstanceCreateInput!, update: ChoreInstanceUpdateInput!): ChoreInstance!
  upsertDebt(where: DebtWhereUniqueInput!, create: DebtCreateInput!, update: DebtUpdateInput!): Debt!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertHousehold(where: HouseholdWhereUniqueInput!, create: HouseholdCreateInput!, update: HouseholdUpdateInput!): Household!
  updateManyInvites(data: InviteUpdateManyMutationInput!, where: InviteWhereInput): BatchPayload!
  updateManyChoreTemplates(data: ChoreTemplateUpdateManyMutationInput!, where: ChoreTemplateWhereInput): BatchPayload!
  updateManyChoreInstances(data: ChoreInstanceUpdateManyMutationInput!, where: ChoreInstanceWhereInput): BatchPayload!
  updateManyDebts(data: DebtUpdateManyMutationInput!, where: DebtWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyHouseholds(data: HouseholdUpdateManyMutationInput!, where: HouseholdWhereInput): BatchPayload!
  deleteManyInvites(where: InviteWhereInput): BatchPayload!
  deleteManyChoreTemplates(where: ChoreTemplateWhereInput): BatchPayload!
  deleteManyChoreInstances(where: ChoreInstanceWhereInput): BatchPayload!
  deleteManyDebts(where: DebtWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyHouseholds(where: HouseholdWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permissions {
  ADMIN
  HEADOFHOUSE
  USER
  YOUTH
}

type Query {
  invites(where: InviteWhereInput, orderBy: InviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invite]!
  choreTemplates(where: ChoreTemplateWhereInput, orderBy: ChoreTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChoreTemplate]!
  choreInstances(where: ChoreInstanceWhereInput, orderBy: ChoreInstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChoreInstance]!
  debts(where: DebtWhereInput, orderBy: DebtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Debt]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  households(where: HouseholdWhereInput, orderBy: HouseholdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Household]!
  invite(where: InviteWhereUniqueInput!): Invite
  choreTemplate(where: ChoreTemplateWhereUniqueInput!): ChoreTemplate
  choreInstance(where: ChoreInstanceWhereUniqueInput!): ChoreInstance
  debt(where: DebtWhereUniqueInput!): Debt
  user(where: UserWhereUniqueInput!): User
  household(where: HouseholdWhereUniqueInput!): Household
  invitesConnection(where: InviteWhereInput, orderBy: InviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InviteConnection!
  choreTemplatesConnection(where: ChoreTemplateWhereInput, orderBy: ChoreTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChoreTemplateConnection!
  choreInstancesConnection(where: ChoreInstanceWhereInput, orderBy: ChoreInstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChoreInstanceConnection!
  debtsConnection(where: DebtWhereInput, orderBy: DebtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DebtConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  householdsConnection(where: HouseholdWhereInput, orderBy: HouseholdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HouseholdConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  invite(where: InviteSubscriptionWhereInput): InviteSubscriptionPayload
  choreTemplate(where: ChoreTemplateSubscriptionWhereInput): ChoreTemplateSubscriptionPayload
  choreInstance(where: ChoreInstanceSubscriptionWhereInput): ChoreInstanceSubscriptionPayload
  debt(where: DebtSubscriptionWhereInput): DebtSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  household(where: HouseholdSubscriptionWhereInput): HouseholdSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permissions!]!
  createdChores(where: ChoreTemplateWhereInput, orderBy: ChoreTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChoreTemplate!]
  currentAssigned(where: ChoreInstanceWhereInput, orderBy: ChoreInstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChoreInstance!]
  households(where: HouseholdWhereInput, orderBy: HouseholdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Household!]
  householdsManaged(where: HouseholdWhereInput, orderBy: HouseholdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Household!]
  debts(where: DebtWhereInput, orderBy: DebtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Debt!]
  credits(where: DebtWhereInput, orderBy: DebtOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Debt!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  createdChores: ChoreTemplateCreateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceCreateManyWithoutCurrentAssignedInput
  households: HouseholdCreateManyWithoutHouseMembersInput
  householdsManaged: HouseholdCreateManyWithoutHeadsOfHouseInput
  debts: DebtCreateManyWithoutDebtorInput
  credits: DebtCreateManyWithoutCreditorInput
}

input UserCreateManyWithoutCurrentAssignedInput {
  create: [UserCreateWithoutCurrentAssignedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutHouseholdsInput {
  create: [UserCreateWithoutHouseholdsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutHouseholdsManagedInput {
  create: [UserCreateWithoutHouseholdsManagedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedChoresInput {
  create: UserCreateWithoutCreatedChoresInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreditsInput {
  create: UserCreateWithoutCreditsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDebtsInput {
  create: UserCreateWithoutDebtsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permissions!]
}

input UserCreateWithoutCreatedChoresInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  currentAssigned: ChoreInstanceCreateManyWithoutCurrentAssignedInput
  households: HouseholdCreateManyWithoutHouseMembersInput
  householdsManaged: HouseholdCreateManyWithoutHeadsOfHouseInput
  debts: DebtCreateManyWithoutDebtorInput
  credits: DebtCreateManyWithoutCreditorInput
}

input UserCreateWithoutCreditsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  createdChores: ChoreTemplateCreateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceCreateManyWithoutCurrentAssignedInput
  households: HouseholdCreateManyWithoutHouseMembersInput
  householdsManaged: HouseholdCreateManyWithoutHeadsOfHouseInput
  debts: DebtCreateManyWithoutDebtorInput
}

input UserCreateWithoutCurrentAssignedInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  createdChores: ChoreTemplateCreateManyWithoutCreatedByInput
  households: HouseholdCreateManyWithoutHouseMembersInput
  householdsManaged: HouseholdCreateManyWithoutHeadsOfHouseInput
  debts: DebtCreateManyWithoutDebtorInput
  credits: DebtCreateManyWithoutCreditorInput
}

input UserCreateWithoutDebtsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  createdChores: ChoreTemplateCreateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceCreateManyWithoutCurrentAssignedInput
  households: HouseholdCreateManyWithoutHouseMembersInput
  householdsManaged: HouseholdCreateManyWithoutHeadsOfHouseInput
  credits: DebtCreateManyWithoutCreditorInput
}

input UserCreateWithoutHouseholdsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  createdChores: ChoreTemplateCreateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceCreateManyWithoutCurrentAssignedInput
  householdsManaged: HouseholdCreateManyWithoutHeadsOfHouseInput
  debts: DebtCreateManyWithoutDebtorInput
  credits: DebtCreateManyWithoutCreditorInput
}

input UserCreateWithoutHouseholdsManagedInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  createdChores: ChoreTemplateCreateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceCreateManyWithoutCurrentAssignedInput
  households: HouseholdCreateManyWithoutHouseMembersInput
  debts: DebtCreateManyWithoutDebtorInput
  credits: DebtCreateManyWithoutCreditorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permissions!]!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  createdChores: ChoreTemplateUpdateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceUpdateManyWithoutCurrentAssignedInput
  households: HouseholdUpdateManyWithoutHouseMembersInput
  householdsManaged: HouseholdUpdateManyWithoutHeadsOfHouseInput
  debts: DebtUpdateManyWithoutDebtorInput
  credits: DebtUpdateManyWithoutCreditorInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  createdChores: ChoreTemplateUpdateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceUpdateManyWithoutCurrentAssignedInput
  households: HouseholdUpdateManyWithoutHouseMembersInput
  householdsManaged: HouseholdUpdateManyWithoutHeadsOfHouseInput
  debts: DebtUpdateManyWithoutDebtorInput
  credits: DebtUpdateManyWithoutCreditorInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyWithoutCurrentAssignedInput {
  create: [UserCreateWithoutCurrentAssignedInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCurrentAssignedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCurrentAssignedInput!]
}

input UserUpdateManyWithoutHouseholdsInput {
  create: [UserCreateWithoutHouseholdsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutHouseholdsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutHouseholdsInput!]
}

input UserUpdateManyWithoutHouseholdsManagedInput {
  create: [UserCreateWithoutHouseholdsManagedInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutHouseholdsManagedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutHouseholdsManagedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutCreatedChoresInput {
  create: UserCreateWithoutCreatedChoresInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreatedChoresDataInput
  upsert: UserUpsertWithoutCreatedChoresInput
}

input UserUpdateOneRequiredWithoutCreditsInput {
  create: UserCreateWithoutCreditsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreditsDataInput
  upsert: UserUpsertWithoutCreditsInput
}

input UserUpdateOneRequiredWithoutDebtsInput {
  create: UserCreateWithoutDebtsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDebtsDataInput
  upsert: UserUpsertWithoutDebtsInput
}

input UserUpdatepermissionsInput {
  set: [Permissions!]
}

input UserUpdateWithoutCreatedChoresDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  currentAssigned: ChoreInstanceUpdateManyWithoutCurrentAssignedInput
  households: HouseholdUpdateManyWithoutHouseMembersInput
  householdsManaged: HouseholdUpdateManyWithoutHeadsOfHouseInput
  debts: DebtUpdateManyWithoutDebtorInput
  credits: DebtUpdateManyWithoutCreditorInput
}

input UserUpdateWithoutCreditsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  createdChores: ChoreTemplateUpdateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceUpdateManyWithoutCurrentAssignedInput
  households: HouseholdUpdateManyWithoutHouseMembersInput
  householdsManaged: HouseholdUpdateManyWithoutHeadsOfHouseInput
  debts: DebtUpdateManyWithoutDebtorInput
}

input UserUpdateWithoutCurrentAssignedDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  createdChores: ChoreTemplateUpdateManyWithoutCreatedByInput
  households: HouseholdUpdateManyWithoutHouseMembersInput
  householdsManaged: HouseholdUpdateManyWithoutHeadsOfHouseInput
  debts: DebtUpdateManyWithoutDebtorInput
  credits: DebtUpdateManyWithoutCreditorInput
}

input UserUpdateWithoutDebtsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  createdChores: ChoreTemplateUpdateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceUpdateManyWithoutCurrentAssignedInput
  households: HouseholdUpdateManyWithoutHouseMembersInput
  householdsManaged: HouseholdUpdateManyWithoutHeadsOfHouseInput
  credits: DebtUpdateManyWithoutCreditorInput
}

input UserUpdateWithoutHouseholdsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  createdChores: ChoreTemplateUpdateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceUpdateManyWithoutCurrentAssignedInput
  householdsManaged: HouseholdUpdateManyWithoutHeadsOfHouseInput
  debts: DebtUpdateManyWithoutDebtorInput
  credits: DebtUpdateManyWithoutCreditorInput
}

input UserUpdateWithoutHouseholdsManagedDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  createdChores: ChoreTemplateUpdateManyWithoutCreatedByInput
  currentAssigned: ChoreInstanceUpdateManyWithoutCurrentAssignedInput
  households: HouseholdUpdateManyWithoutHouseMembersInput
  debts: DebtUpdateManyWithoutDebtorInput
  credits: DebtUpdateManyWithoutCreditorInput
}

input UserUpdateWithWhereUniqueWithoutCurrentAssignedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCurrentAssignedDataInput!
}

input UserUpdateWithWhereUniqueWithoutHouseholdsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutHouseholdsDataInput!
}

input UserUpdateWithWhereUniqueWithoutHouseholdsManagedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutHouseholdsManagedDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCreatedChoresInput {
  update: UserUpdateWithoutCreatedChoresDataInput!
  create: UserCreateWithoutCreatedChoresInput!
}

input UserUpsertWithoutCreditsInput {
  update: UserUpdateWithoutCreditsDataInput!
  create: UserCreateWithoutCreditsInput!
}

input UserUpsertWithoutDebtsInput {
  update: UserUpdateWithoutDebtsDataInput!
  create: UserCreateWithoutDebtsInput!
}

input UserUpsertWithWhereUniqueWithoutCurrentAssignedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCurrentAssignedDataInput!
  create: UserCreateWithoutCurrentAssignedInput!
}

input UserUpsertWithWhereUniqueWithoutHouseholdsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutHouseholdsDataInput!
  create: UserCreateWithoutHouseholdsInput!
}

input UserUpsertWithWhereUniqueWithoutHouseholdsManagedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutHouseholdsManagedDataInput!
  create: UserCreateWithoutHouseholdsManagedInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  createdChores_every: ChoreTemplateWhereInput
  createdChores_some: ChoreTemplateWhereInput
  createdChores_none: ChoreTemplateWhereInput
  currentAssigned_every: ChoreInstanceWhereInput
  currentAssigned_some: ChoreInstanceWhereInput
  currentAssigned_none: ChoreInstanceWhereInput
  households_every: HouseholdWhereInput
  households_some: HouseholdWhereInput
  households_none: HouseholdWhereInput
  householdsManaged_every: HouseholdWhereInput
  householdsManaged_some: HouseholdWhereInput
  householdsManaged_none: HouseholdWhereInput
  debts_every: DebtWhereInput
  debts_some: DebtWhereInput
  debts_none: DebtWhereInput
  credits_every: DebtWhereInput
  credits_some: DebtWhereInput
  credits_none: DebtWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
